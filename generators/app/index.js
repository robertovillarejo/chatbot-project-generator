'use strict';
const Generator = require('yeoman-generator');
const chalk = require('chalk');
const yosay = require('yosay');

module.exports = class extends Generator {
  /*
  This.argument('app-name', {
    desc: 'Your project name',
    type: String,
    default: this.appname
  });

  this.argument('app-page', {
    desc: 'Your project page',
    type: String,
    default: ''
  });

  this.argument('description', {
    desc: 'Your project description',
    type: String,
    default: ''
  });

  this.argument('author', {
    desc: 'Your name or your company name',
    type: String,
    default: ''
  });

  this.argument('port', {
    desc: 'The port to expose the project',
    type: Number,
    default: 8090
  });

  this.argument('webhook', {
    desc: 'Enable webhook support for fulfillment',
    type: Boolean,
    default: true
  });

  this.argument('endpoint-webhook', {
    desc: 'Your endpoint webhook for fulfillment',
    type: String,
    default: 'http://localhost:8090/fulfillment'
  });

  this.argument('facebook', {
    desc: 'Enable Facebook Bot support',
    type: Boolean,
    default: true
  });

  this.argument('facebook-menu', {
    desc: 'Enable Facebook Bot menu',
    type: Boolean,
    default: true
  });

  this.argument('facebook-access-token', {
    desc: 'Your Facebook access token',
    type: String,
    default: ''
  });

  this.argument('facebook-verify-token', {
    desc: 'Your Facebook verify token',
    type: String,
    default: ''
  });

  this.argument('nlp-service', {
    desc: 'Your NLP service',
    type: String,
    default: 'DIALOGFLOW'
  });

  this.argument('dialogflow-client-token', {
    desc: 'Your DialogFlow client token',
    type: String,
    default: ''
  });

  this.argument('dialogflow-developer-token', {
    desc: 'Your DialogFlow developer token',
    type: String,
    default: ''
  });

  this.argument('git-repository', {
    desc: 'Your Git remote repository',
    type: String,
    default: ''
  });

  this.argument('license', {
    desc: 'Your project license',
    type: String,
    default: 'MIT'
  });
  */

  prompting() {
    // Have Yeoman greet the user.
    this.log(
      yosay('Welcome to the ' + chalk.red('generator-chatbot-broker') + ' generator!')
    );

    const prompts = [
      {
        type: 'input',
        name: 'appName',
        message: 'Your project name',
        default: this.appname
      },
      {
        type: 'input',
        name: 'description',
        message: 'The project description',
        default: 'Autogenerated chatbot broker'
      },
      {
        type: 'input',
        name: 'author',
        message: 'Your name or company name',
        default: this.user.git.name()
      },
      {
        type: 'input',
        name: 'port',
        message: 'The port to expose the project',
        validate: function(value) {
          return !isNaN(parseInt(value, 10));
        },
        default: 8090
      },
      {
        type: 'confirm',
        name: 'webhook',
        message: 'Do you want to create a webhook?',
        default: true
      },
      {
        type: 'input',
        name: 'endpointWebhook',
        message: 'Your endpoint for fulfillment',
        default: '',
        when: function(answers) {
          return answers.webhook;
        }
      },
      {
        type: 'checkbox',
        name: 'messagingPlatforms',
        message: 'Messaging platforms',
        choices: [
          {
            name: 'facebook',
            checked: true
          }
        ]
      },
      {
        type: 'confirm',
        name: 'facebookMenu',
        message: 'Do you want to generate a menu in Facebook chat?',
        default: true,
        when: function(answers) {
          return answers.messagingPlatforms.includes('facebook');
        }
      },
      {
        type: 'input',
        name: 'appPage',
        message: 'Your project page',
        default: '',
        when: function(answers) {
          return answers.facebookMenu;
        }
      },
      {
        type: 'password',
        name: 'facebookAccessToken',
        message: 'Your Facebook access token (leave empty to manual edit in .env file)',
        default: '',
        when: function(answers) {
          return answers.messagingPlatforms.includes('facebook');
        }
      },
      {
        type: 'password',
        name: 'facebookVerifyToken',
        message: 'Your Facebook verify token (leave empty to manual edit in .env file)',
        default: '',
        when: function(answers) {
          return answers.messagingPlatforms.includes('facebook');
        }
      },
      {
        type: 'list',
        name: 'nlpServices',
        message: 'NLP services',
        choices: [
          {
            name: 'DIALOGFLOW',
            checked: true
          }
        ]
      },
      {
        type: 'password',
        name: 'dialogflowClientToken',
        message: 'Your DialogFlow client token (leave empty to manual edit in .env file)',
        default: '',
        when: function(answers) {
          return answers.nlpServices.includes('DIALOGFLOW');
        }
      },
      {
        type: 'password',
        name: 'dialogflowDeveloperToken',
        message:
          'Your DialogFlow developer token (leave empty to manual edit in .env file)',
        default: '',
        when: function(answers) {
          return answers.nlpServices.includes('DIALOGFLOW');
        }
      },
      {
        type: 'input',
        name: 'gitRepository',
        message: 'Your git remote repository',
        default: ''
      },
      {
        type: 'list',
        name: 'license',
        message: 'The license',
        choices: [{ name: 'MIT' }]
      }
    ];

    return this.prompt(prompts).then(props => {
      // To access props later use this.props.someAnswer;
      this.props = props;
    });
  }

  prepareModel() {
    if (this.props.messagingPlatforms.includes('facebook')) {
      this.props.facebook = true;
    }
    if (this.props.nlpServices.includes('DIALOGFLOW')) {
      this.props.nlpService = 'DIALOGFLOW';
    }

    var model = {
      appName: this.props.appName,
      appPage: this.props.appPage,
      description: this.props.description,
      author: this.props.author,
      webhook: this.props.webhook,
      webhookConfig: {
        endpoint: this.props.endpointWebhook
      },
      facebookBot: this.props.facebook,
      facebookBotConfig: {
        menu: this.props.facebookMenu,
        accessToken: this.props.facebookAccessToken,
        verifyToken: this.props.facebookVerifyToken
      },
      nlpService: this.props.nlpService,
      dialogFlowConfig: {
        clientToken: this.props.dialogflowClientToken,
        developerToken: this.props.dialogflowDeveloperToken
      },
      gitRepository: this.props.gitRepository,
      license: this.props.license,
      port: this.props.port
    };
    this.model = model;
  }

  writing() {
    /* This.fs.copyTpl(
      this.templatePath('chatbot-archetype'),
      this.destinationPath(this.destinationRoot()),
      options,
      undefined,
      { globOptions: { dot: true, ignore: ['facebook', 'fulfillment'] } }
    ); */

    var base = [
      'conversation',
      'web-server',
      '.env',
      '.gitignore',
      'index.js',
      'LICENSE',
      'package-lock.json',
      'package.json',
      'README.md'
    ];

    base.forEach(element => {
      this.fs.copyTpl(
        this.templatePath('chatbot-archetype/' + element),
        this.destinationPath(this.destinationRoot() + '/' + element),
        this.model,
        undefined,
        { globOptions: { dot: true } }
      );
    });

    if (this.model.facebookBot) {
      this.fs.copyTpl(
        this.templatePath('chatbot-archetype/facebook'),
        this.destinationPath(this.destinationRoot() + '/facebook'),
        this.model,
        undefined,
        { globOptions: { dot: true } }
      );
    }

    if (this.model.webhook) {
      this.fs.copyTpl(
        this.templatePath('chatbot-archetype/fulfillment'),
        this.destinationPath(this.destinationRoot() + '/fulfillment'),
        this.model,
        undefined,
        { globOptions: { dot: true } }
      );
    }
  }

  install() {
    this.npmInstall();
  }

  end() {
    this.log(chalk.green.bold('Chatbot broker application generated successfully'));
    this.log(chalk.green('Run your app:'));
    this.log(chalk.yellow('npm start'));
    this.log(
      chalk.green.bold(
        'If you want to generate a basic conversation in DIALOGFLOW simply run'
      )
    );
    this.log(chalk.yellow('npm run conversation-create'));
  }
};
