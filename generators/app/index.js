'use strict';
const Generator = require('yeoman-generator');
const chalk = require('chalk');
const yosay = require('yosay');

module.exports = class extends Generator {

    constructor(args, opts) {
      super(args, opts);

      this.argument('app-name', {
        desc: 'Your project name',
        type: String,
        default: this.appname
      });

      this.argument('description', {
        desc: 'Your project description',
        type: String,
        default: ''
      });

      this.argument('author', {
        desc: 'Your name or your company name',
        type: String,
        default: ''
      });

      this.argument('disable-webhook', {
        desc: 'Disable webhook support for fulfillment',
        type: Boolean,
        default: false
      });

      this.argument('endpoint-webhook', {
        desc: 'Your endpoint webhook for fulfillment',
        type: String,
        default: 'http://localhost:8090/fulfillment'
      });

      this.argument('facebook', {
        desc: 'Disable Facebook Bot support',
        type: Boolean,
        default: false
      });

      this.argument('facebook-menu', {
        desc: 'Disable Facebook Bot menu',
        type: Boolean,
        default: false
      });

      this.argument('facebook-access-token', {
        desc: 'Your Facebook access token',
        type: String,
        default: ''
      });

      this.argument('facebook-verify-token', {
        desc: 'Your Facebook verify token',
        type: String,
        default: ''
      });

      this.argument('nlp-service', {
        desc: 'Your NLP service',
        type: String,
        default: 'DIALOGFLOW'
      });

      this.argument('dialogflow-client-token', {
        desc: 'Your DialogFlow client token',
        type: String,
        default: ''
      });

      this.argument('dialogflow-developer-token', {
        desc: 'Your DialogFlow developer token',
        type: String,
        default: ''
      });

      this.argument('git-repository', {
        desc: 'Your Git remote repository',
        type: String,
        default: ''
      });

      this.argument('license', {
        desc: 'Your project license',
        type: String,
        default: 'MIT'
      });

      console.log(this.options);
      console.log(this.configOptions);

    }

    prompting() {
      // Have Yeoman greet the user.
      this.log(yosay(
        'Welcome to the awe-inspiring ' + chalk.red('generator-chatbot-broker') + ' generator!'
      ));

      const prompts = [/*{
          type: 'input',
          name: 'appName',
          message: 'Your project name',
          default: this.appname
        }
        ,
            {
              type: 'input',
              name: 'description',
              message: 'The project description',
              default: 'An autogenerated chatbot project'
            },
            {
              type: 'input',
              name: 'author',
              message: 'The author',
              default: ''
            },
            {
              type: 'confirm',
              name: 'webhook',
              message: 'Do you want to create a webhook?',
              default: true
            },
            {
              type: 'input',
              name: 'webhook',
              message: 'Do you want to create a webhook?',
              default: true
            },
            {
              type: 'input',
              name: 'facebookBotConfig.accessToken',
              message: 'Your Facebook access token',
              default: ''
            },
            {
              type: 'input',
              name: 'facebookBotConfig.verifyToken',
              message: 'Your Facebook verify token',
              default: ''
            },
            {
              type: 'input',
              name: 'dialogFlowConfig.clientToken',
              message: 'Your DialogFlow client token',
              default: ''
            },
            {
              type: 'input',
              name: 'dialogFlowConfig.developerToken',
              message: 'Your DialogFlow developer token',
              default: ''
            }*/];

        return this.prompt(prompts).then(props => {
          // To access props later use this.props.someAnswer;
          this.props = props;
        });
      }

      writing() {
        /*
        this.fs.copyTpl(
          this.templatePath('.env'),
          this.destinationPath('.env'), {
            appName: this.props.appName,
            description: 'autogenerated project',
            author: 'Roberto',
            webhook: true,
            webhookConfig: {
              endpoint: 'http://localhost:8090'
            },
            facebookBot: true,
            facebookBotConfig: {
              menu: true,
              accessToken: 'ACCESS-TOKEN',
              verifyToken: 'VERIFy-TOKEN'
            },
            nlpService: 'DIALOGFLOW',
            dialogFlowConfig: {
              clientToken: 'CLIENT-TOKEN',
              developerToken: 'DEVELOPER-TOKEN'
            },
            gitRepository: 'GITREPO',
            license: 'MIT',
            port: 8540
          }
        );*/

        var options = {
          appName: this.options['app-name'],
          appPage: 'MY-PAGE',
          description: this.options['description'] || 'NO-DESCRIPTION',
          author: this.options['author'],
          webhook: true,
          webhookConfig: {
            endpoint: this.options['endpoint-webhook']
          },
          facebookBot: true,
          facebookBotConfig: {
            menu: true,
            accessToken: this.options['facebook-access-token'],
            verifyToken: this.options['facebook-verify-token']
          },
          nlpService: 'DIALOGFLOW',
          dialogFlowConfig: {
            clientToken: this.options['dialogflow-client-token'],
            developerToken: this.options['dialogflow-developer-token']
          },
          gitRepository: 'GITREPO',
          license: 'MIT',
          port: 8090
        };

        this.fs.copyTpl(
          this.templatePath('chatbot-archetype'),
          this.destinationPath(this.destinationRoot()),
          options
        );
        this.fs.copyTpl(
          this.templatePath('chatbot-archetype/env'),
          this.destinationPath(this.destinationRoot() + '/.env'),
          options
        );
      }

      install() {
        //this.installDependencies();
      }
    };
